import socket
import numpy as np
import pyaudio
import wave
import os
from time import time
import speech_recognition as sr
import pandas as pd
import re
from sklearn.feature_extraction.text import TfidfVectorizer, TfidfTransformer
from sklearn.metrics.pairwise import cosine_similarity
import pickle

# Constants
SAMPLE_RATE = 16000
CHUNK_SIZE = 1024
DURATION = 10
SAVE_PATH = "D:/audioai"
UDP_IP = "0.0.0.0"
UDP_PORT = 1234

os.makedirs(SAVE_PATH, exist_ok=True)


# H√†m ti·ªÅn x·ª≠ l√Ω vƒÉn b·∫£n cho TF-IDF
def preprocess_text(text, mode='content'):
    if mode == 'content':
        text = re.sub(r'<[^>]+>', '', text)
        text = text.lower()
        text = re.sub(r'^https?:\/\/.*[\r\n]*', '', text, flags=re.MULTILINE)
        text = text.replace('\n', ' ')
        text = re.sub(r'[^\s\w√°√†·∫£√£·∫°ƒÉ·∫Ø·∫±·∫≥·∫µ·∫∑√¢·∫•·∫ß·∫©·∫´·∫≠√©√®·∫ª·∫Ω·∫π√™·∫ø·ªÅ·ªÉ·ªÖ·ªá√≥√≤·ªè√µ·ªç√¥·ªë·ªì·ªï·ªó·ªô∆°·ªõ·ªù·ªü·ª°·ª£√≠√¨·ªâƒ©·ªã√∫√π·ªß≈©·ª•∆∞·ª©·ª´·ª≠·ªØ·ª±√Ω·ª≥·ª∑·ªπ·ªµƒë_.1234567890:,?]', ' ',
                      text)
        text = re.sub(r'(?<=[.!?])[^.!?]*\?', '', text)
        text = re.sub(r'\s+', ' ', text).strip()
        text = re.sub(r'\.{2,3}', '.', text)
    else:
        text = text.lower()
        text = text.replace('.', ',')
    return text


def get_next_filename():
    """T·∫°o t√™n file m·ªõi kh√¥ng tr√πng l·∫∑p"""
    index = 1
    while os.path.exists(os.path.join(SAVE_PATH, f"audio_{index}.wav")):
        index += 1
    return os.path.join(SAVE_PATH, f"audio_{index}.wav")


def receive_audio():
    """Thu √¢m thanh qua UDP v√† l∆∞u v√†o file WAV"""
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.setsockopt(socket.SOL_SOCKET, socket.SO_RCVBUF, 65536)
    sock.bind((UDP_IP, UDP_PORT))
    print(f"ƒêang l·∫Øng nghe g√≥i UDP tr√™n c·ªïng {UDP_PORT}...")

    p = pyaudio.PyAudio()
    stream = p.open(format=pyaudio.paInt16, channels=1, rate=SAMPLE_RATE, output=True)
    filename = get_next_filename()
    wf = wave.open(filename, 'wb')
    wf.setnchannels(1)
    wf.setsampwidth(p.get_sample_size(pyaudio.paInt16))
    wf.setframerate(SAMPLE_RATE)

    max_chunks = int((SAMPLE_RATE * DURATION) / CHUNK_SIZE)
    chunk_count = 0
    buffer = bytearray()
    start_time = time()

    try:
        while chunk_count < max_chunks:
            data, addr = sock.recvfrom(CHUNK_SIZE * 2 * 4)
            buffer.extend(data)
            while len(buffer) >= CHUNK_SIZE * 2:
                audio_data = buffer[:CHUNK_SIZE * 2]
                buffer = buffer[CHUNK_SIZE * 2:]
                samples = np.frombuffer(audio_data, dtype=np.int16)
                stream.write(samples.tobytes())
                wf.writeframes(audio_data)
                chunk_count += 1
                if chunk_count % 10 == 0:
                    elapsed = time() - start_time
                    print(f"ƒê√£ x·ª≠ l√Ω {chunk_count}/{max_chunks} ph·∫ßn ({elapsed:.1f}s)")
        print(f"üéôÔ∏è Ho√†n t·∫•t thu √¢m! File ƒë√£ l∆∞u: {filename}")
        return filename
    except Exception as e:
        print(f"L·ªói: {e}")
        return None
    finally:
        sock.close()
        stream.stop_stream()
        stream.close()
        p.terminate()
        wf.close()


def audio_to_text(audio_file_path):
    """Chuy·ªÉn √¢m thanh sang vƒÉn b·∫£n ti·∫øng Vi·ªát"""
    recognizer = sr.Recognizer()
    with sr.AudioFile(audio_file_path) as source:
        audio_data = recognizer.record(source)
    try:
        text = recognizer.recognize_google(audio_data, language="vi-VN")
        return text
    except sr.UnknownValueError:
        return "Kh√¥ng th·ªÉ nh·∫≠n di·ªán ƒë∆∞·ª£c n·ªôi dung audio"
    except sr.RequestError as e:
        return f"L·ªói khi k·∫øt n·ªëi ƒë·∫øn d·ªãch v·ª•: {e}"


def predict_answer(query):
    """D·ª± ƒëo√°n c√¢u tr·∫£ l·ªùi d·ª±a tr√™n TF-IDF"""
    # Load m√¥ h√¨nh v√† d·ªØ li·ªáu
    with open('tfidf_vectorizer.pkl', 'rb') as f:
        tfidf_vectorizer = pickle.load(f)
    train_data = pd.read_csv('train_data_processed.csv')
    tfidf_matrix = tfidf_vectorizer.transform(train_data['question_processed'])
    transformer = TfidfTransformer()
    tfidf = transformer.fit_transform(tfidf_matrix)

    # Ti·ªÅn x·ª≠ l√Ω v√† vector h√≥a c√¢u h·ªèi
    query_processed = preprocess_text(query, mode='content')
    query_tfidf = tfidf_vectorizer.transform([query_processed])
    scores = cosine_similarity(query_tfidf, tfidf).flatten()
    best_idx = np.argmax(scores)

    # L·∫•y k·∫øt qu·∫£
    matched_question = train_data.iloc[best_idx]['question']
    matched_answer = train_data.iloc[best_idx]['answer']
    matched_link = train_data.iloc[best_idx]['link']
    similarity_score = scores[best_idx]

    return {
        'input_question': query,
        'matched_question': matched_question,
        'answer': matched_answer,
        'link': matched_link,
        'similarity_score': similarity_score
    }


def main():
    """H√†m ch√≠nh k·∫øt h·ª£p thu √¢m, chuy·ªÉn text v√† d·ª± ƒëo√°n c√¢u tr·∫£ l·ªùi"""
    try:
        # Thu √¢m thanh
        audio_file = receive_audio()

        if audio_file:
            print(f"ƒêang chuy·ªÉn file {audio_file} sang vƒÉn b·∫£n...")
            # Chuy·ªÉn √¢m thanh sang text
            text_result = audio_to_text(audio_file)
            print("VƒÉn b·∫£n t·ª´ √¢m thanh: ", text_result)

            # N·∫øu chuy·ªÉn ƒë·ªïi th√†nh c√¥ng, ƒë∆∞a v√†o model d·ª± ƒëo√°n
            if text_result and "Kh√¥ng th·ªÉ nh·∫≠n di·ªán" not in text_result and "L·ªói khi k·∫øt n·ªëi" not in text_result:
                print("\nƒêang d·ª± ƒëo√°n c√¢u tr·∫£ l·ªùi...")
                prediction = predict_answer(text_result)

                print(f"\nC√¢u h·ªèi t·ª´ √¢m thanh : {prediction['input_question']}")
                print(f"C√¢u h·ªèi kh·ªõp nh·∫•t  : {prediction['matched_question']}")
                print(f"ƒê·ªô t∆∞∆°ng ƒë·ªìng       : {prediction['similarity_score']:.4f}")
                print(f"C√¢u tr·∫£ l·ªùi         : {prediction['answer']}")
                print(f"Link                : {prediction['link']}")
                print("-" * 50)
            else:
                print("Kh√¥ng th·ªÉ d·ª± ƒëo√°n c√¢u tr·∫£ l·ªùi do l·ªói chuy·ªÉn ƒë·ªïi √¢m thanh.")
        else:
            print("Kh√¥ng c√≥ file √¢m thanh ƒë·ªÉ x·ª≠ l√Ω.")

    except Exception as e:
        print(f"ƒê√£ x·∫£y ra l·ªói: {e}")


if __name__ == "__main__":
    main()